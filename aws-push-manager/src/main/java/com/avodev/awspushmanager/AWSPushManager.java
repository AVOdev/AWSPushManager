package com.avodev.awspushmanager;

import android.content.Context;
import android.preference.PreferenceManager;
import android.util.Log;

import com.amazonaws.handlers.AsyncHandler;
import com.amazonaws.services.sns.AmazonSNSAsyncClient;
import com.amazonaws.services.sns.model.CreatePlatformEndpointRequest;
import com.amazonaws.services.sns.model.CreatePlatformEndpointResult;
import com.amazonaws.services.sns.model.GetEndpointAttributesRequest;
import com.amazonaws.services.sns.model.GetEndpointAttributesResult;
import com.amazonaws.services.sns.model.NotFoundException;
import com.amazonaws.services.sns.model.SetEndpointAttributesRequest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * AWSPushManager
 *
 * Copyright (c) 2016 Martijn van Berkel (Flitskikker) / AVOdev. All right reserved.
 *
 * Original code:
 * Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
 * Code generated by AWS Mobile Hub. Amazon gives unlimited permission to copy, distribute and modify it.
 */

/**
 The Push Manager registers the app on the device with Google Cloud Messaging
 (GCM) and registers the resulting device token in Amazon SNS. The result
 of this registration process is an Amazon SNS Endpoint ARN, which can be used to
 send push notifications directly to a specific device. The Push Manager also
 manages Amazon SNS topic subscriptions, allowing the app to subscribe to
 Amazon SNS topics, which let you target groups of devices with push notifications.
 */
public class AWSPushManager {
    // Context
    private static Context context;

    // SNS client
    private static AmazonSNSAsyncClient amazonSNSClient;

    // SharedPreferences keys
    private static final String AWS_PUSH_MANAGER_IS_ENABLED = "com.amazonaws.pushmanager.isEnabled";
    private static final String AWS_PUSH_MANAGER_ENABLED_TOPIC_ARNS = "com.amazonaws.pushmanager.enabledTopicARNs";
    private static final String AWS_PUSH_MANAGER_REGISTRATION_ID = "com.amazonaws.pushmanager.registrationId";
    private static final String AWS_PUSH_MANAGER_ENDPOINT_ARN = "com.amazonaws.pushmanager.endpointARN";
    private static final String AWS_PUSH_MANAGER_PLATFORM_ARN = "com.amazonaws.pushmanager.platformARN";

    // The default platform application ARN
    private static String defaultPlatformARN;

    // The list of `PushTopic`.
    private static ArrayList<AWSPushTopic> topics = new ArrayList<>();

    public static void initialize(Context context, AmazonSNSAsyncClient amazonSNSClient) {
        // Set context
        AWSPushManager.context = context;

        // Set client
        AWSPushManager.amazonSNSClient = amazonSNSClient;

        // Get previous platform ARN
        String previousPlatformAppARN = PreferenceManager.getDefaultSharedPreferences(context).getString(AWS_PUSH_MANAGER_PLATFORM_ARN, "");

        if (!previousPlatformAppARN.equals(getDefaultPlatformARN())) {
            Log.d("AWSPushManager", "Application ran previously with this ARN: " + previousPlatformAppARN + ".  New ARN: " + AWSPushManager.defaultPlatformARN);

            setRegistrationId("");
            setEndpointARN("");
            setPlatformARN("");
        }
    }

    // The default platform application ARN
    public static String getDefaultPlatformARN() {
        return defaultPlatformARN;
    }

    public static void setDefaultPlatformARN(String defaultPlatformARN) {
        AWSPushManager.defaultPlatformARN = defaultPlatformARN;
    }

    public static void registerTopicARNs(String[] topicARNs) {
        topics = new ArrayList<>();

        for (String topicARN : topicARNs) {
            // Allocating and initializing the topic object does not automatically subscribe the device to the topic.
            // See the subscribe method for details on subscribing.
            AWSPushTopic topic = new AWSPushTopic(context, topicARN);
            topics.add(topic);
        }
    }

    public static AWSPushTopic getTopicForTopicARN(String topicARN) {
        for (AWSPushTopic topic : topics) {
            if (topic.getTopicARN().equals(topicARN)) {
                return topic;
            }
        }

        return null;
    }


    // Generic properties

    public static AmazonSNSAsyncClient getAmazonSNSClient() {
        return amazonSNSClient;
    }

    public static ArrayList<AWSPushTopic> getTopics() {
        return topics;
    }


    // Properties

    // Indicates if `PushManager` is enabled or disabled.
    public static boolean isEnabled() {
        // Set as true by default, change to false as needed
        return PreferenceManager.getDefaultSharedPreferences(context).getBoolean(AWS_PUSH_MANAGER_IS_ENABLED, true);
    }

    public static void setEnabled(boolean enabled) {
        PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(AWS_PUSH_MANAGER_IS_ENABLED, enabled).commit();
    }

    // The registration id returned by Android.
    public static String getRegistrationId() {
        return PreferenceManager.getDefaultSharedPreferences(context).getString(AWS_PUSH_MANAGER_REGISTRATION_ID, "");
    }

    public static void setRegistrationId(String registrationId) {
        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(AWS_PUSH_MANAGER_REGISTRATION_ID, registrationId).commit();
    }

    // The application platform endpoint ARN for Amazon SNS.
    public static String getEndpointARN() {
        return PreferenceManager.getDefaultSharedPreferences(context).getString(AWS_PUSH_MANAGER_ENDPOINT_ARN, "");
    }

    public static void setEndpointARN(String endpointARN) {
        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(AWS_PUSH_MANAGER_ENDPOINT_ARN, endpointARN).commit();
    }

    //  The application platform ARN for the app.
    public static String getPlatformARN() {
        return PreferenceManager.getDefaultSharedPreferences(context).getString(AWS_PUSH_MANAGER_PLATFORM_ARN, "");
    }

    public static void setPlatformARN(String platformARN) {
        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(AWS_PUSH_MANAGER_PLATFORM_ARN, platformARN).commit();
    }


    // User action methods

    public static void disablePushNotifications(final Callback callback) {
        SetEndpointAttributesRequest setEndpointAttributesRequest = new SetEndpointAttributesRequest();
        Map<String, String> attributes = new HashMap<String, String>();
        attributes.put("Enabled", "false");

        setEndpointAttributesRequest.setEndpointArn(getEndpointARN());
        setEndpointAttributesRequest.setAttributes(attributes);

        if (getAmazonSNSClient() == null) return;

        try {
            getAmazonSNSClient().setEndpointAttributesAsync(setEndpointAttributesRequest, new AsyncHandler<SetEndpointAttributesRequest, Void>() {
                @Override
                public void onError(Exception exception) {
                    if (callback != null) callback.onError(exception.getLocalizedMessage());
                }

                @Override
                public void onSuccess(SetEndpointAttributesRequest request, Void aVoid) {
                    setEnabled(false);

                    if (callback != null) callback.onSuccess();
                }
            });
        } catch (Exception e) {
            if (callback != null) callback.onError(e.getLocalizedMessage());
        }
    }


    // RegistrationIntentService interceptors

    public static void sendRegistrationToServer(final String registrationId, final Callback callback) {
        Log.d("AWSPushManager", "The registration id: " + registrationId);

        if (registrationId == null || registrationId.equals("")) {
            Log.e("AWSPushManager", "The registration id is invalid.");

            if (callback != null) callback.onError("The registration id is invalid.");

            return;
        }

        setRegistrationId(registrationId);

        // If endpoint ARN not stored
        if (getEndpointARN().equals("")) {
            // First time registration
            CreatePlatformEndpointRequest createPlatformEndpointRequest = new CreatePlatformEndpointRequest();
            createPlatformEndpointRequest.setToken(registrationId);
            createPlatformEndpointRequest.setPlatformApplicationArn(getDefaultPlatformARN());

            setPlatformARN(getDefaultPlatformARN());

            // Call CreatePlatformEndpoint
            try {
                getAmazonSNSClient().createPlatformEndpointAsync(createPlatformEndpointRequest, new AsyncHandler<CreatePlatformEndpointRequest, CreatePlatformEndpointResult>() {
                    @Override
                    public void onError(Exception exception) {
                        if (callback != null) callback.onError(exception.getLocalizedMessage());
                    }

                    @Override
                    public void onSuccess(CreatePlatformEndpointRequest request, CreatePlatformEndpointResult createPlatformEndpointResult) {
                        Log.d("AWSPushManager", "Endpoint ARN: " + createPlatformEndpointResult.getEndpointArn());

                        // Store returned endpoint ARN
                        setEndpointARN(createPlatformEndpointResult.getEndpointArn());

                        setEnabled(true);

                        if (callback != null) callback.onSuccess();
                    }
                });
            } catch (Exception e) {
                if (callback != null) callback.onError(e.getLocalizedMessage());
            }
        } else {
            // Try to get endpoint attributes
            GetEndpointAttributesRequest getEndpointAttributesRequest = new GetEndpointAttributesRequest();
            getEndpointAttributesRequest.setEndpointArn(getEndpointARN());

            try {
                getAmazonSNSClient().getEndpointAttributesAsync(getEndpointAttributesRequest, new AsyncHandler<GetEndpointAttributesRequest, GetEndpointAttributesResult>() {
                    @Override
                    public void onError(Exception exception) {
                        // If getting attributes encountered NotFound exception
                        if (exception instanceof NotFoundException) {
                            // Endpoint was deleted
                            CreatePlatformEndpointRequest createPlatformEndpointRequest = new CreatePlatformEndpointRequest();
                            createPlatformEndpointRequest.setToken(registrationId);
                            createPlatformEndpointRequest.setPlatformApplicationArn(getDefaultPlatformARN());

                            setPlatformARN(getDefaultPlatformARN());

                            // Call CreatePlatformEndpoint
                            try {
                                getAmazonSNSClient().createPlatformEndpointAsync(createPlatformEndpointRequest, new AsyncHandler<CreatePlatformEndpointRequest, CreatePlatformEndpointResult>() {
                                    @Override
                                    public void onError(Exception exception) {
                                        if (callback != null) callback.onError(exception.getLocalizedMessage());
                                    }

                                    @Override
                                    public void onSuccess(CreatePlatformEndpointRequest request, CreatePlatformEndpointResult createPlatformEndpointResult) {
                                        Log.d("AWSPushManager", "Endpoint ARN: " + createPlatformEndpointResult.getEndpointArn());

                                        // Store returned endpoint ARN
                                        setEndpointARN(createPlatformEndpointResult.getEndpointArn());

                                        setEnabled(true);

                                        if (callback != null) callback.onSuccess();
                                    }
                                });
                            } catch (Exception e) {
                                if (callback != null) callback.onError(e.getLocalizedMessage());
                            }
                        } else {
                            if (callback != null) callback.onError(exception.getLocalizedMessage());
                        }
                    }

                    @Override
                    public void onSuccess(GetEndpointAttributesRequest request, GetEndpointAttributesResult getEndpointAttributesResult) {
                        // If token in endpoint does not match latest or GetEndpointAttributes shows endpoint as disabled
                        if (!getEndpointAttributesResult.getAttributes().get("Token").equals(registrationId) || getEndpointAttributesResult.getAttributes().get("Enabled").equals("False")) {
                            // Call SetEndpointAttributes to set the latest token and enable the endpoint
                            SetEndpointAttributesRequest setEndpointAttributesRequest = new SetEndpointAttributesRequest();
                            Map<String, String> attributes = new HashMap<String, String>();
                            attributes.put("Token", registrationId);
                            attributes.put("Enabled", "true");

                            setEndpointAttributesRequest.setEndpointArn(getEndpointARN());
                            setEndpointAttributesRequest.setAttributes(attributes);

                            try {
                                getAmazonSNSClient().setEndpointAttributesAsync(setEndpointAttributesRequest, new AsyncHandler<SetEndpointAttributesRequest, Void>() {
                                    @Override
                                    public void onError(Exception exception) {
                                        if (callback != null) callback.onError(exception.getLocalizedMessage());
                                    }

                                    @Override
                                    public void onSuccess(SetEndpointAttributesRequest request, Void aVoid) {
                                        setEnabled(true);

                                        if (callback != null) callback.onSuccess();
                                    }
                                });
                            } catch (Exception e) {
                                if (callback != null) callback.onError(e.getLocalizedMessage());
                            }
                        } else {
                            if (callback != null) callback.onSuccess();
                        }
                    }
                });
            } catch (Exception e) {
                if (callback != null) callback.onError(e.getLocalizedMessage());
            }
        }
    }

    public interface Callback {
        void onSuccess();
        void onError(String error);
    }
}

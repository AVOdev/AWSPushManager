package com.avodev.awspushmanager;

import android.content.Context;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;

import com.amazonaws.handlers.AsyncHandler;
import com.amazonaws.services.sns.model.SubscribeRequest;
import com.amazonaws.services.sns.model.SubscribeResult;
import com.amazonaws.services.sns.model.UnsubscribeRequest;

import org.json.JSONException;
import org.json.JSONObject;

/**
 * AWSPushManager > AWSPushTopic
 *
 * Copyright (c) 2016 Martijn van Berkel (Flitskikker) / AVOdev. All right reserved.
 *
 * Original code:
 * Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
 * Code generated by AWS Mobile Hub. Amazon gives unlimited permission to copy, distribute and modify it.
 */

/**
 A topic object.
 */
public class AWSPushTopic {
    // Dictionary keys
    private final String AWS_PUSH_TOPIC_SUBSCRIPTION_ARN = "subscriptionARN";
    private final String AWS_PUSH_TOPIC_TOPIC_ARN = "topicARN";

    // Context
    private Context context;

    // The topic ARN.
    private String topicARN;

    // The subscription ARN from Amazon SNS.
    private String subscriptionARN;


    /**
     Initializes the topic object with a given topic ARN.

     @param topicARN A topic ARN from Amazon SNS.
     */
    public AWSPushTopic(Context context, String topicARN) {
        this.context = context;
        this.topicARN = topicARN;

        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);

        try {
            JSONObject topicJSON = new JSONObject(sharedPreferences.getString(topicARN, ""));
            this.subscriptionARN = topicJSON.getString(AWS_PUSH_TOPIC_SUBSCRIPTION_ARN);
        } catch (JSONException e) {
            try {
                JSONObject json = new JSONObject();
                json.put(AWS_PUSH_TOPIC_TOPIC_ARN, topicARN);
                sharedPreferences.edit().putString(topicARN, json.toString()).commit();
            } catch (JSONException e2) {
                e.printStackTrace();
            }
        }
    }


    // Generic properties

    public String getTopicARN() {
        return topicARN;
    }

    public String getSubscriptionARN() {
        return subscriptionARN;
    }


    // Properties

    // The topic name.
    public String getTopicName() {
        return this.topicARN.substring(this.topicARN.lastIndexOf(":") + 1);
    }

    // Indicates if the device is registered for the topic.
    public boolean isSubscribed() {
        return subscriptionARN != null && !subscriptionARN.equals("");
    }

    public void setSubscriptionARN(String subscriptionARN) {
        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);

        try {
            JSONObject topicJSON = new JSONObject(sharedPreferences.getString(topicARN, ""));
            topicJSON.put(AWS_PUSH_TOPIC_SUBSCRIPTION_ARN, subscriptionARN);
            sharedPreferences.edit().putString(topicARN, topicJSON.toString()).commit();

            this.subscriptionARN = subscriptionARN;
        } catch (JSONException e) {
            e.printStackTrace();

            this.subscriptionARN = subscriptionARN;
        }
    }


    // User action methods

    /**
     Subscribes the device to the topic.
     */
    public void subscribe(final Callback callback) {
        final SubscribeRequest subscribeRequest = new SubscribeRequest();
        subscribeRequest.setTopicArn(getTopicARN());
        subscribeRequest.setProtocol("application");
        subscribeRequest.setEndpoint(AWSPushManager.getEndpointARN());

        try {
            AWSPushManager.getAmazonSNSClient().subscribeAsync(subscribeRequest, new AsyncHandler<SubscribeRequest, SubscribeResult>() {
                @Override
                public void onError(Exception exception) {
                    if (callback != null) callback.onError(exception.getLocalizedMessage());
                }

                @Override
                public void onSuccess(SubscribeRequest request, SubscribeResult subscribeResult) {
                    setSubscriptionARN(subscribeResult.getSubscriptionArn());

                    if (callback != null) callback.onSuccess();
                }
            });
        } catch (Exception e) {
            if (callback != null) callback.onError(e.getLocalizedMessage());
        }
    }

    /**
     Unsubscribes the device from the topic.
     */
    public void unsubscribe(final Callback callback) {
        UnsubscribeRequest unsubscribeRequest = new UnsubscribeRequest();
        unsubscribeRequest.setSubscriptionArn(getSubscriptionARN());

        try {
            AWSPushManager.getAmazonSNSClient().unsubscribeAsync(unsubscribeRequest, new AsyncHandler<UnsubscribeRequest, Void>() {
                @Override
                public void onError(Exception exception) {
                    if (callback != null) callback.onError(exception.getLocalizedMessage());
                }

                @Override
                public void onSuccess(UnsubscribeRequest request, Void aVoid) {
                    setSubscriptionARN("");

                    if (callback != null) callback.onSuccess();
                }
            });
        } catch (Exception e) {
            if (callback != null) callback.onError(e.getLocalizedMessage());
        }
    }

    public interface Callback {
        void onSuccess();
        void onError(String error);
    }
}